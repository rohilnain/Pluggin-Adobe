<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"> <html><head><title><font size="+4"><b>SnippetRunner Cookbook</b></font></title></head><body><font size="+3"><b>Introduction </b></font><p>The SnippetRunner enables developers to quickly prototype code containing Adobe&reg Acrobat&reg or PDF Library API calls without the overhead of writing and verifying a complete plug-in or application. It provides the infrastructure and utility functions needed to support execution and testing of code snippets, which are small but complete portions of Acrobat plug-in or PDF Library application code.</p>The SnippetRunner architecture consists of these major components:<UL><LI>A back-end server that provides the basic functionality, which includes a parameter input mechanism, debug support, and exception handling. For the Acrobat SDK, the back-end server is the SnippetRunnerServer Acrobat plug-in. For the PDF Library, it is the SnippetRunner application.</LI><LI>The SnippetRunner <I>Common Interface</I> which acts as a client to the back-end server and provides a unified cross-platform user interface to use and extend SnippetRunner functionality.</LI></UL>This document contains the following sections:<UL><LI><b><i>Setting Up to Run SnippetRunner and Common Interface</i></b></LI><LI><b><i>Using the Common Interface</i></b></LI><LI><b><i>Understanding and Writing Snippets</i></b></LI><LI><b><i>Working with the Java Interface</i></b></LI></UL>Where appropriate, this document points out differences in usage of SnippetRunner in the Acrobat SDK and the PDF Library SDK.<br>SnippetRunner is accompanied by more than 100 sample code snippets that demonstrate Acrobat and PDF Library API methods. The following documents list these snippets:<UL><LI><I>Guide to SDK Samples</I> for the Acrobat SDK.</LI><LI><I>PDF Library Overview</I> for the PDF Library SDK.</LI></UL>In addition, these Acrobat and PDF Library SDK documents are useful in writing and understanding snippets:<UL><LI><I>Developing Plug-ins and Applications</I> and <I>Acrobat and PDF Library API Reference</I> describe the APIs you use in developing plug-ins and PDF Library applications.</LI><LI><I>Developing Plug-ins and Applications</I> also provides an introduction to those portions of the Adobe Acrobat Software Development Kit (SDK) that pertain to your development efforts for Adobe Reader&reg.</LI></UL><a name="001"></a><font size="+3"><b>Setting Up to Run SnippetRunner and Common Interface</b></font><br><br><font size="+2"><b>SnippetRunner</b></font><br><p>SnippetRunner consists of a set of files, organized into folders in the Samples\SnippetRunner\ directory of the Acrobat SDK or PDF Library SDK. The directory includes the following files:</p><UL><LI><b>Source code files for the SnippetRunner server.</b> These files are located in the Sources\platform\ directory. For each platform, there is a project file you can use to compile SnippetRunner along with the SDK header files. It consists of a <b>.vcproj</b> file for Microsoft Windows&reg, a <b>.xcodeproj</b> file for Mac OS, and makefiles for UNIX platforms.</LI><LI><b>SnippetRunner environment and utility files.</b> These files are located in the Sources\platform\Acrobat (for the Acrobat SDK only) and Sources\platform\Shared directories.</LI><LI><b>Individual code snippets.</b> Each of these is intended to demonstrate one or more APIs. Each snippet exists as a single, separate file within the Sources\snippets\Acrobat (for the Acrobat SDK only) and the Sources\snippets\Shared directory, and is included in the SnippetRunner project. If you write your own snippets (see <b><i>Understanding and Writing Snippets</i></b>), you can add them to the SnippetRunner project and rebuild the project.</LI><LI><b>External files required by snippets.</b> These are in the ExampleFiles directory and can be sample files for input or resources for user interface components.</LI></UL><font size="+1"><b>Building SnippetRunner</b></font><br><p>Before using the SnippetRunner, you need to build it in the appropriate manner for your platform. For the Acrobat SDK, after the SnippetRunner project is built, the SnippetRunner Server plug-in must be installed in the appropriate plug_ins directory so that it will be loaded by Acrobat when it is launched. It will be copied automatically after being built if the <b>AcroSDKPIDir</b> environment variable is defined, or it may be copied manually.</p><font size="+2"><b>Common Interface</b></font><br><p>The SnippetRunner Common Interface extends the usability and functionality of SnippetRunner, and it provides uniformity and availability across platforms. It works as a front end for communicating commands triggered by user interactions to the SnippetRunner server and interpreting feedbacks from the server as a result of executing commands. See section <b><i>Using the Common Interface</i></b> below for features and usage of the Common Interface.</p> <p>The SnippetRunner Common Interface was first introduced as a Java application with Acrobat 7.0 SDK and PDFL 7.0 SDK, and was subsequently rewritten for Acrobat 8.0 SDK with Adobe Flex 2 and run by the ubiquitous Adobe Flash runtime in a browser.</p> <p>For Acrobat 9.0 SDK, the SnippetRunner Common Interface goes a step further by taking advantage of the Adobe Integrated Runtime (AIR), which enables hassle-free installation and configuration of the SnippetRunner Common Interface and decouples the application from the confinement of the browser while preserving the familiar user interface and allowing easy access like any desktop application. </p><font size="+1"><b>Installing the Common Interface</b></font><p>For Acrobat SDK, the Common Interface is delivered as an Adobe AIR application. You can browse to http://www.adobe.com/go/air and follow the link to download and install the free Adobe Integrated Runtime (AIR). Once the runtime is installed, simply double-click the CommonInterfaceAIR.air file found in your SDK package to install the Common Interface.</p><p>For PDF Library SDK, see <b><i>Working with the Java Interface</i></b> for details on setting up your environment to run the Java-based Common Interface with PDF Library SnippetRunnerServer application.)</p>	<a name="004"></a><font size="+2"><b>Starting the SnippetRunner and the Common Interface</b></font><br><p>To use the Common Interface client with the SnippetRunner server, the SnippetRunner server must be started prior to starting the Common Interface client to ensure the proper establishment of socket communication channels. </p><p>When running the SnippetRunner server as a plug-in, you must launch Acrobat or Adobe Reader before starting the Common Interface. As long as you have copied the SnippetRunnerServer plug-in file to the plug_ins directory of Acrobat or Adobe Reader, the SnippetRunner server loads on application launch and starts listening on a port designated for socket connection requests.</p><p>When running the SnippetRunner server as a PDF Library application, you simply start up the Common Interface, which automatically starts the PDF Library SnippetRunner application prior to attempting to establish a socket communication channel. </p><a name="002"></a><font size="+3"><b>Using the Common Interface</b></font><br><p>With the Common Interface, you can:<UL><LI>See the collection of available code snippets sorted by categories</LI><LI>Get snippet information</LI><LI>Execute snippets</LI><LI>Examine the output generated as a result of a snippet execution</LI><LI>Browse snippet source code</LI></UL></p>The Common Interface has four panes:<UL><LI>The Snippet Collection pane (upper left)</LI><LI>The Snippet Description pane (lower left)</LI><LI>The Source/Reference Browser pane (upper right)</LI><LI>The Snippet Output pane (lower right) </LI></UL><font size="+2"><b>Interacting with the Common Interface</b></font><br><UL><LI>You can resize, maximize, or minimize the main window as you would with any application. You can adjust the relative sizes of the individual panes by dragging the pane dividers.</LI><LI>The Snippet Collection pane groups available snippets into a folder hierarchy for ease of access. These categories are defined in the snippets' registration macros (see <b><i>Understanding and Writing Snippets</i></b>).</LI><LI>You can navigate the hierarchy by means of mouse or keyboard.<UL><LI>Use the Up/Down arrow keys to move up and down the list.</LI><LI>Use the Left/Right arrow keys or click the triangles to expand or collapse a folder.</LI></UL></LI><LI>Whenever you hover over (AIR version) or select (Java version) a snippet name, its description appears in the Snippet Description pane.</LI><LI>To browse the source code of a snippet, click on a snippet node and select <b>Browse the source code</b> from the context menu. The source code shows up as a tabbed window in the Source Browser pane.</LI><LI>To execute a snippet, click (AIR version) or right-click (Java version) on a snippet node and select <b>Execute this snippet</b> from the context menu.</LI></LI><LI>The Source/Reference Browser pane provides a tabbed interface to allow switching between the Reference view and the snippet source code views. </LI><UL><LI>The Source view displays the code for a selected snippet. You can switch between multiple snippets by clicking the tabs at the top of the window. You can close the specific source view by clicking the &quot;X&quot; in the upper-left corner (AIR version) or lower-right corner (Java version). </LI><LI>The Reference view displays SnippetRunner Cookbook documentation . You can navigate this document by means of mouse or keyboard. In addition, you can navigate between views of this document by right-clicking to access the Back and Forward commands in the context-sensitive menu (Java version).</LI></UL><LI><font color="#ff0000">Note:</font> For the PDF Library SDK only, you can also right-click anywhere in the pane and select <b>Open a New Document</b>, which allows opening a document for use by a snippet. At the bottom of the pane is a document status area that shows the file name of the current open document. A plus sign (+) in the brackets indicates that the document has been modified.</LI></UL><a name="003"></a><font size="+3"><b>Understanding and Writing Snippets</b></font><br>    A code snippet must contain at least the following:<UL><LI>A single main function that acts as its entry point. Snippets may contain additional functions as needed.</LI><LI>A macro call that binds the snippet to the SnippetRunner environment. </LI></UL>An example of a single-function snippet that is included with the SnippetRunner project, SimpleSnip.cpp, is shown below. The code for this snippet also includes comments (not shown here) that provide useful development hints.<pre><p><font face="Courier">#include &quot;SnippetRunner.h&quot;#include &quot;SnippetRunnerUtils.h&quot;void SimpleSnip(){  Console::displayString(&quot;This is a simple snippet.&quot;);  Console::displayString(&quot;Simple snippet executed\n&quot;);}SNIPRUN_REGISTER(SimpleSnip, &quot;Simple Framework&quot;, &quot;SimpleSnip creates a framework for a snippet.&quot;)</font></p></pre><p>This snippet has a single function, <font face="Courier"><b>SimpleSnip</b></font>, which writes two messages to the output pane of the Common Interface (see <b><i> Using the Common Interface</i></b>) using the utility function <font face="Courier"><b>Console::displayString</b></font>. This function enables you to perform memory dumps and view strings (<b>char *</b>), <b>ASText</b> objects, and Cos objects. (See the source files SnippetRunnerUtils.cpp and Console.cpp for details.)</p><p>Because the <font face="Courier"><b>SimpleSnip</b></font> function requires no parameters, it uses the macro call <font face="Courier"><b>SNIPRUN_REGISTER</b></font> to bind to the SnippetRunner environment. (See <b><i>Passing Parameters to Snippets</i></b> for other possibilities.) This macro requires three parameters: </p><UL><LI>The name of the function that is the entry point for the snippet (the same as the snippet's file name).</LI><LI>A string indicating where the snippet's node is to appear in the Snippet Collection pane of the Common Interface UI. If the snippet location is not at the root level of the hierarchy, the string specifies the path to the snippet, with folder names separated by colons. For example, the GetFontInfoSnip snippet would specify : &quot;PDLayer:Fonts:Get Font Info&quot;. <font color="#ff0000">Note:</font> A snippet's node name is limited to 49 characters.</LI><LI>A string of descriptive text to be presented in the Snippet Description pane.</LI></UL><p>SimpleSnip is a <I>synchronous</I> or &quot;one-shot&quot; snippet, meaning that it executes and then terminates. See <b><i>Toggling and Asynchronous Snippets</i></b> for other possibilities.</p><a name="005"></a><font size="+2"><b>Passing parameters to snippets</b></font><p>You can pass parameters to a snippet's main function. To enable this mechanism, use the <font face="Courier"><b>SNIPRUN_REGISTER_WITH_DIALOG</b></font> macro in your snippet to bind the snippet to SnippetRunner. This call takes an extra parameter (beyond the three required by <font face="Courier"><b>SNIPRUN_REGISTER</b></font>), which is a single string representing default parameter(s) separated by spaces.</p><p>When a snippet implemented with <font face="Courier"><b>SNIPRUN_REGISTER_WITH_DIALOG</b></font> is invoked, a dialog box with the snippet's descriptive text appears that includes a text edit box pre-populated with the default values set by the fourth parameter. </p><p><font color="#ff0000">Note:</font> If necessary, this dialog box can be suppressed using the utility calls <font face="Courier"><b>turnParamDialogOff</b>(/<b>On</b>) and <b>toggleParamDialog</b> (see SnippetRunnerUtils.cpp).</font></p><p>An example of the use of this macro and its resulting values is in the TextChangeColour snippet, whose macro call is written as follows:</p><pre><p><font face="Courier">  SNIPRUN_REGISTER_WITH_DIALOG(TextChangeColourSnip, &quot;PDE Layer: Text:Change colour&quot;,&quot;Shows how to change the colour of text in a document&quot;,&quot;0 0 65000&quot;)</font></p></pre><p>When this snippet is invoked, a dialog box displays &quot;Shows how to change colour of text in a document&quot; and the parameter text edit box is pre-populated with the default values: &quot;0 0 65000&quot;. For this example, the parameters are meant to represent RGB color values. You can edit the text in the dialog box to change the values of the parameters. </p><p>To access the parameters passed in through the dialog box, use the <font face="Courier"><b>ParamsManager</b></font> class. This class (see ParamManager.cpp) provides a set of methods that allow you to obtain the input parameters as integer, string, hex, and fixed data types. (To provide support for other data types, you must extend the <font face="Courier"><b>ParamsManager</b></font> class.)</p><p>For example, the <font face="Courier"><b>TextChangeColour</b></font> function is defined with a single parameter of type <font face="Courier"><b>ParamManager *</b></font>, to provide storage for the snippet's parameters:</p><pre><p><font face="Courier">  void TextChangeColourSnip(ParamManager * thePM)</font></p></pre><p>The following code in the <font face="Courier"><b>TextChangeColourSnip</b></font> function converts the input parameter string to three separate RGB values of type integer:</p><pre><p><font face="Courier">  ASInt32 red,green,blue;    thePM-&gt;getNextParamAsInt(red);  thePM-&gt;getNextParamAsInt(green);  thePM-&gt;getNextParamAsInt(blue);</font></p></pre><a name="006"></a><font size="+2"><b>Toggling behavior and asynchronous snippets</b></font><br><font color="#ff0000">Note:</font> This section applies to Acrobat plug-in snippets only; not to the PDF Library SDK.</font><p>SnippetRunner provides utility methods for toggling behavior. For example, FormCalculationsSnip turns on and off the ability to perform form calculations. It uses the <font face="Courier"><b>toggleSnippetCheck</b></font> method (see SnippetRunnerUtils.cpp) to turn the state on if it was previously off, and vice versa.</p><p>Other snippets that toggle behavior include AVPageViewToggleWireframeDrawingSnip, and AVAppShowAnnotProperties.</p><p>Some snippets define and register callbacks in the same manner as plug-ins. (See the SDK documentation regarding <font face="Courier"><b>ASCallback</b></font> objects, <font face="Courier"><b>ASCallbackCreateProto</b></font> and <font face="Courier"><b>ASCallbackDestroy</b></font>). Specifically, to register a snippet for a notification, use <font face="Courier"><b>AVAppRegisterNotification</b></font> and provide a callback function with the appropriate arguments. To register your snippet for a specific event, such as IdleProc, PageViewDrawing, PageViewClicks or PageViewAdjustCursor, use the related <font face="Courier"><b>AVAppRegisterXXX</b></font> method. You can toggle a snippet to Off by checking for its On state and unregistering via the complementary <font face="Courier"><b>AVAppUnregisterXXX</b></font> method.</p><p>Such snippets can be <I>asynchronous</I> in the sense that they register a callback whose output (or other result) does not appear until a particular event occurs. Snippets that register for notifications include: OptContNotificationTracerSnip, AVAppFrontDocChangeNotSnip, AVAppRegisterForPageViewDrawingSnip, PDDocDidDeletePagesNotSnip and IdleProcSnip.</p><font size="+2"><b>Handling exceptions</b></font><p>The SnippetRunner provides an exception handler that reports the name of the snippet that caused an exception. Synchronous snippets require no special considerations with regard to exception handling within the SnippetRunner environment.</p><p>However, if you write a snippet containing a callback that is called asynchronously, the callback function should include its own exception handlers to trap and handle various exceptions. When an exception occurs, your exception handler can perform any necessary cleanup, such as releasing memory. The core API provides the following macros for handling errors: <font face="Courier"><b>DURING</b></font> ,<font face="Courier"><b>HANDLER</b></font> , <font face="Courier"><b>END_HANDLER</b></font> and <font face="Courier"><b>E_RETURN</b></font>. If methods in your snippet code could return an error code or NULL if something goes wrong, you can call the <font face="Courier"><b>ASRaise</b></font> method, which generates an exception. </p><font size="+2"><b>Handling documents</b></font><p>SnippetRunner provides a C++ class, <font face="Courier"><b>CDocument</b></font>, that handles getting documents in the SnippetRunner environment. (See CDocument.h and CDocument.cpp. )</p><p>To use this class, a document must be open. You declare a <font face="Courier"><b>CDocument</b></font> object and then cast it to the type you need. For example:</p><pre><font face="Courier">  CDocument document;  AVDocGetFoo((AVDoc)document);</font></pre>Supported cast types are:<UL><LI><font face="Courier"><b>AVDoc</b></font> - The front document (does not apply to PDF Library)</LI><LI><font face="Courier"><b>PDDoc</b></font> - The front <font face="Courier"><b>AVDoc</b></font> in Acrobat or the document that is open in PDF Library</LI><LI><font face="Courier"><b>CosDoc</b></font> - Derived from the current <font face="Courier"><b>PDDoc</b></font></LI><LI><font face="Courier"><b>AVPageView</b></font> - The current page view in the front document (does not apply to PDF Library)</LI><LI><font face="Courier"><b>PDPage</b></font> - The page associated with the current page view in Acrobat (or the page that has been set in PDF Library). It defaults to the first page.</LI></UL><p>The destructor method of <font face="Courier"><b>CDocument</b></font> is called when the snippet returns. Therefore, you do not need to write code to release or destroy these objects.</p></font><font size="+3"><b>Working with the Java Interface</b></font><br><br><font size="+2"><b>The Java Runtime Environment</b></font><p>To use the Java-based Common Interface, make sure you have the Java VM properly installed. If you already have a JDK installed, you do not need a separate JVM for the SnippetRunner Common Interface. If you are specifically installing one for this application, the J2SE 1.4.2 (or 1.5) JRE from Sun Microsystems is recommended.</p><font size="+2"><b>Starting the Common Interface</b></font><p>You may load the Common Interface as a standalone Java application or as a Java applet. The following sections describe the procedures for each of these cases. <br>The Common Interface is packaged as a Java Archive (JAR) file containing Java byte code (class files) and associated resources. This file is CommonInterface.jar in the SnippetRunner folder. The JAR format provides for resource integrity and also allows the content of the archive to be digitally signed, which is required so that the Common Interface can be certified to run as an applet by a web browser's JVM.</p><b>Creating the configuration file</b><br><p>The first time the Common Interface is invoked, a configuration file (acrosdk.config for the Acrobat SDK and pdflsdk.config for the PDF Library) is automatically generated and stored in the user's home directory.</p><p>To ensure that the contents of this file are created accurately, you must launch the Common Interface from its installed location in the SnippetRunner folder so that a &quot;base&quot; directory (a platform-specific absolute path to the SnippetRunner folder) can be properly written to the file. This path is used by the Common Interface to locate reference files and snippet source code at run time. Once this configuration file is written, the Common Interface can be invoked from any folder location. </p><p>If a path other than that of the SnippetRunner folder is written to the configuration file, the Common Interface will not function properly. If this occurs, delete the configuration file and restart the Common Interface from its base directory.</p><b>Running as a standalone Java application</b><br><p>To run the client as a standalone Java application:</p><p><b>1.</b> From a terminal or console window, switch to the directory where the CommonInterface.jar file resides (the SnippetRunner directory).</p><p><b>2.</b> Execute the following command:</p><pre><p><font face="Courier">  console&gt;java -jar -cp . CommonInterface.jar</font></p></pre><p>On Windows and Mac OS, you can also double-click the CommonInterface.jar icon to launch the Common Interface. (This procedure assumes that the JAR file extension has not been associated with other applications after your JDK/JRE installation.) The SnippetRunner Common Interface should begin running very soon thereafter.</p><b>Running as a Java applet</b><br><p>To run the Common Interface client as a Java applet, you must digitally sign the JAR file before loading the client into your web browser. This requires the <font face="Courier"><b>keytool</b></font> and <font face="Courier"><b>jarsigner</b></font> command-line utilities from the J2SE Development Kit (or equivalent).</p><p>To sign the CommonInterface.jar file for running as an applet:</p><p><b>1.</b> Generate a public/private key pair and the self-signed certificate.</p><p><b>2.</b> Sign the JAR file with the private key.</p><p><b>3.</b> Load the signed client into your browser.</p><p>To generate a public/private key pair and the self-signed certificate, issue a command similar to this from a console using the <font face="Courier"><b>keytool</b></font> utility:<pre><p><font face="Courier">   console&gt;keytool -genkey -alias <I>EntryAlias</I> -keypass <I>EntryPassword</I> </b></font></font></p></pre></p><p>where <I>EntryAlias</I> is a name you want to assign for this key pair entry in the keystore and <I>EntryPassword</I> is a password required to guard against that key entry.</p><p>You will be prompted for the keystore password of your choice and some information to incorporate into the self-signed certificate. The newly generated public/private key pair and the self-signed certificate will be saved in the keystore file in the default location. Refer to the JDK Security Tools documentation for details on the keystore.</p><p>To sign the JAR file with the private key, issue a command similar to the following from a console using the <font face="Courier"><b>jarsigner</b></font> utility:<pre><p><font face="Courier">  console&gt;jarsigner -storepass <I>StorePass</I> -keypass <I>KeyPass</I> CommonInterface.jar <I>EntryAlias</I></font></p></pre></p><p>where <I>StorePass</I> is the keystore password assigned while creating the public/private key pair entry in the previous step. <I>KeyPass</I> is the key pair entry password assigned in the previous step. <I>EntryAlias</I> is the name assigned to the key pair entry in the previous step.</p><p>This completes the applet signing process in preparation for the Common Interface to be run as an applet by the JVM plug-in of the platform browser. The signed JAR file contains a copy of the certificate from the keystore for the public key corresponding to the private key used to sign the JAR file.</p><p>Now that you have signed the JAR file, load the provided HTML page CommonInterface.html (in the SnippetRunner folder) into your default browser. This page is an applet starter page that marks up the applet properties.</p><p>Accept the certificate to allow the browser JVM plug-in to execute the applet byte code. The Common Interface should begin running soon thereafter, and you can interact with it within the boundary of the browser window.</p><font size="+2"><b>Known issues</b></font><br>The following issues pertain to the Java-based Common Interface.<UL><LI>The socket communication between the SnippetRunner server and client may be lost during the operating system's sleep mode. To re-establish communication, restart the Common Interface.</LI><LI>If you start the Acrobat process by loading a PDF document into the web browser plug-in, the Common Interface socket communication will carry on with that process, which is most likely not expected.</LI><LI>Currently, only Internet Explorer supports resizable content. All other browsers render the Common Interface at a fixed dimension.</LI><LI>On Mac OS X, if you minimize the Common Interface window to the Dock and then bring it back into view, the Common Interface window might not be properly repainted. Resize the window to force the GUI to refresh.</LI><LI>On Windows, an Acrobat dialog box triggered as a result of a command issued by the Common Interface may not come up to the top of all open windows, in which case the Common Interface may seem frozen. Open Acrobat to dismiss the dialog box.</LI></UL></body></html>